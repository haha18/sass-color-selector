/*
 * Copyright (c) 2018, Bing Yang
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree.
 *
 */

// select a color pair satisfies given color contrast ratio, based on Monochromatic color schemes
// mono-pair($color, $ratio): call color-pair($color1, $color2, $ratio). initialize $color1 and $color2 to be $color (the same color)
//
@function mono-pair($color, $ratio) {
  @return color-pair($color, $color, $ratio);
}

// select a color pair satisfies given color contrast ratio, based on Complementary color schemes
// complem-pair($color, $ratio): calculate the complementary color based on given color, then call color-pair($color1, $color2, $ratio)
@function complem-pair($color, $ratio) {
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  $new-hue: $hue + 180;
  @if $new-hue >= 360 {
    $new-hue: $new-hue - 360;
  }
  $new-color: hsl($new-hue, $saturation, $lightness);
  @return color-pair($color, $new-color, $ratio);
}

// select a color pair satisfies given color contrast ratio, based on Analogous color schemes
// analo-pair($color, $ratio, $choose): calculate the analogous color based on given color and a choose switch, then call color-pair($color1, $color2, $ratio)
// when $choose, the choose switch is set to 2, then the value of hue will shift 60 degree. Otherwhise, the value of hue will shift 30 degree.
@function analo-pair($color, $ratio, $choose) {
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  $new-hue: $hue + 30;
  @if $choose == 2 {
    $new-hue: $hue + 60;
  }
  @if $new-hue >= 360 {
    $new-hue: $new-hue - 360;
  }
  $new-color: hsl($new-hue, $saturation, $lightness);
  @return color-pair($color, $new-color, $ratio);
}

// select a color pair satisfies given color contrast ratio, based on Triadic color schemes
// tri-pair($color, $ratio, $choose): calculate the analogous color based on given color and a choose switch, then call color-pair($color1, $color2, $ratio)
// when $choose, the choose switch is set to 2, then the value of hue will shift 240 degree. Otherwhise, the value of hue will shift 120 degree.
@function tri-pair($color, $ratio, $choose) {
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  $new-hue: $hue + 120;
  @if $choose == 2 {
    $new-hue: $hue + 240;
  }
  @if $new-hue >= 360 {
    $new-hue: $new-hue - 360;
  }
  $new-color: hsl($new-hue, $saturation, $lightness);
  @return color-pair($color, $new-color, $ratio);
}

// select a color pair satisfies given color contrast ratio, based on Compound color schemes
// compound-pair($color, $ratio, $choose): calculate the analogous color based on given color and a choose switch, then call color-pair($color1, $color2, $ratio)
// when $choose, the choose switch is set to 2, then the value of hue will shift 210 degree. Otherwhise, the value of hue will shift 150 degree.
@function compound-pair($color, $ratio, $choose) {
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  $new-hue: $hue + 150;
  @if $choose == 2 {
    $new-hue: $hue + 210;
  }
  @if $new-hue >= 360 {
    $new-hue: $new-hue - 360;
  }
  $new-color: hsl($new-hue, $saturation, $lightness);
  @return color-pair($color, $new-color, $ratio);
}

// select color pair based on given color pair and color contrast ratio
// Three functions included
// select-color($color1, $color2, $ratio): the Main function, check whether the color pair satisfies color contrast ratio or not. If not, adjust one or two colors (adjust lightness of color)
// resturned color pair: ($high-color, $low-color)

// get-low-color($color, $ratio): adjust the color with lower relative luminance to be lower enough
// get-high-color($color, $ratio): adjust the color with higher relative luminance to be higher enough
@function color-pair($color1, $color2, $ratio) {  // select color pair to satisfy color contrast ratio
  // return original color pair when color contrast ratio is good
  @if contrast($color1, $color2) >= $ratio {
    @return ($color1, $color2);
  }

  // set the high limit of relative luminance, and the low limit of relative luminance
  $high-limit: 4 * $ratio;  // when color contrast ratio < 4.5
  $low-limit: 4;

  @if $ratio >= 7 {  // when color contrast ratio >= 7
    $high-limit: 2 * $ratio;
    $low-limit: 2;
  }
  @else if $ratio >= 4.5 {  // when color contrast ratio is between 4.5 and 7
    $high-limit: 3 * $ratio;
    $low-limit: 3;
  }

  $ratio-color1: (value-L($color1) + 0.05)/0.05;
  $ratio-color2: (value-L($color2) + 0.05)/0.05;

  // select the color with higher relative luminance, and the color with lower relative luminance
  $high: $ratio-color1;
  $high-color: $color1;
  $low: $ratio-color2;
  $low-color: $color2;
  $exchanged: false;
  @if $ratio-color1 < $ratio-color2 {  // exchange
    $high: $ratio-color2;
    $high-color: $color2;
    $low: $ratio-color1;
    $low-color: $color1;
    $exchanged: true;
  }
  
  @if $low * $ratio < 21 {
    $high: $low * $ratio;  
    $high-color: get-high-color($high-color, $high);
  }
  @else if $high / $ratio > 1 {
    $low: $high / $ratio;  
    $low-color: get-low-color($low-color, $low);
  }
  @else {
    $high-color: get-high-color($high-color, $high-limit);
    $low-color: get-low-color($low-color, $low-limit);
  }

  //@if $high < $high-limit and $low > $low-limit {  // both colors need to be adjusted
  //  $high-color: get-high-color($high-color, $high-limit);
  //  $low-color: get-low-color($low-color, $low-limit);
  //}
  //@else if $high < $high-limit and $low < $low-limit {  // the color with higher relative luminance needs to be adjusted
  //  $high-color: get-high-color($high-color, $high-limit);
  //}
  //@else {  // the color with lower relative luminance needs to be adjusted
  //  $low-color: get-low-color($low-color, $low-limit);
  //}

  @if $exchanged {  // exchange color back
    @return ($low-color, $high-color);
  }
  @else {
    @return ($high-color, $low-color);
  }

}

@function get-low-color($color, $ratio) {  // adjust the color with lower relative luminance to be lower enough
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  $new-lightness: $lightness - 0.01;  // reduce lightness of the color
  $new-color: hsl($hue, $saturation, $new-lightness);
  $ratio-color: (value-L($new-color) + 0.05)/0.05;
  @while $ratio-color > $ratio {  // a loop to adjust the color
    $new-lightness: $new-lightness - 0.01;
    $new-color: hsl($hue, $saturation, $new-lightness);
    $ratio-color: (value-L($new-color) + 0.05)/0.05;
  }
  @return $new-color;
}

@function get-high-color($color, $ratio) {  // adjust the color with higher relative luminance to be higher enough
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  $new-lightness: $lightness + 0.01;  // increase lightness of the color
  $new-color: hsl($hue, $saturation, $new-lightness);
  $ratio-color: (value-L($new-color) + 0.05)/0.05;
  @while $ratio-color < $ratio {  // a loop to adjust the color
    $new-lightness: $new-lightness + 0.01;
    $new-color: hsl($hue, $saturation, $new-lightness);
    $ratio-color: (value-L($new-color) + 0.05)/0.05;
  }
  @return $new-color;
}

// Color contrast ratio
// Three functions included
// contrast($color1, $color2): the Main function, calculate color contrast ratio based on relative luminance, call function value-L($color)
// value-L($color): calculate relative luminance of $color, call function value-RGB($mono-color)
// value-RGB($mono-color): calculate value of R, G, or B, based on mono-color value of red, green, or blue, and the mono-color value is between 0 and 1, call math function fifth-root($number)
@function contrast($color1, $color2) {  // calculate color contrast ratio
  $temp: (value-L($color1) + 0.05) / (value-L($color2) + 0.05);
  @if $temp > 1 {
    @return $temp;
  }
  @else {
    @return 1 / $temp;
  }
}

@function value-L($color) {  // calculate relative luminance
  $red: red($color) / 255;
  $green: green($color) / 255;
  $blue: blue($color) / 255;
  @return 0.2126 * value-RGB($red) + 0.7152 * value-RGB($green) + 0.0722 * value-RGB($blue);
}

@function value-RGB($mono-color) {  // Used to calculate R, G, and B
  @if $mono-color <= 0.03928 {
    @return $mono-color / 12.92;
  }
  @else {
    $temp: ($mono-color + 0.055) / 1.055;
    $result: $temp * fifth-root($temp);
    @return $result * $result;
  }
}

// Math functions of fourth-power and fifth-root
// In fifth-root() function, a nth-root algorithm is used.
// In fifth-root() function, the fourth-power() function is called.
@function fifth-root($number) {  // calculate pow($number, 0.2), using nth-root algorithm
  $current: $number;
  $delta: ($number / fourth-power($current) - $current) / 5;
  @while $delta > 0.0001 or $delta < -0.0001 {
    $current: $current + $delta;
    $delta: ($number / fourth-power($current) - $current) / 5;
  }
  @return $current;
}

@function fourth-power($number) {  // calculate pow($number, 4)
  @return $number * $number * $number * $number;
}
